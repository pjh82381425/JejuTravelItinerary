node.js : JavaScript 런타임 환경
> 서버 개발 및 비동기 프로그래밍에 강점

1. 비동기 처리 - 싱글 스레드 이벤트 루프를 사용하여 논블로킹 방식으로 I/O 작업을 수행합니다.
2. 내장 HTTP 서버 - 별도의 웹 서버 없이 HTTP 모듈을 사용하여 직접 서버를 실행할 수 있습니다.
3. 모듈 시스템 - CommonJS 기반의 모듈 시스템을 사용하여 코드의 재사용성과 유지보수성을 높일 수 있습니다.
4. npm 패키지 관리 - npm(Node Package Manager)을 통해 수많은 오픈소스 패키지를 설치하고 관리할 수 있습니다.
5. Express 웹 프레임워크 - Express.js를 활용하여 간단하고 빠르게 웹 서버 및 API를 개발할 수 있습니다.
6. 데이터베이스 연동 - MongoDB, MySQL, PostgreSQL 등 다양한 데이터베이스와 쉽게 연결할 수 있습니다.
7. 파일 시스템 접근 - fs 모듈을 사용하여 파일 읽기, 쓰기, 삭제 등의 작업을 수행할 수 있습니다.
8. 실시간 통신 지원 - WebSocket 및 socket.io 라이브러리를 통해 실시간 데이터 전송이 가능합니다.
9. 크로스 플랫폼 실행 - Windows, macOS, Linux에서 동일한 코드로 실행할 수 있습니다.
10. 마이크로서비스 개발 - 경량 서버 환경을 제공하여 마이크로서비스 아키텍처를 구축하는 데 유용합니다.

7. WebSocket과 socket.io차이점

                        WebSocket	                socket.io
    연결 방식	    네이티브 WebSocket 사용	    WebSocket + 폴링 자동 지원
    브라우저 지원	최신 브라우저만 지원	    구형 브라우저에서도 사용 가능
    자동 재연결	    직접 구현해야 함	        기본적으로 자동 재연결 지원
    브로드캐스트	직접 관리해야 함	        io.emit()으로 쉽게 가능
    설치 필요 여부	기본적으로 내장됨	        npm install socket.io 필요

브로드캐스트(Broadcast)는 서버에서 여러 클라이언트에게 동시에 메시지를 전송하는 기능입니다.
기본적으로 WebSocket은 1:1 통신을 지원하지만, 여러 클라이언트에게 같은 메시지를 보내려면 직접 관리해야 합니다.
socket.io는 io.emit()을 사용하여 손쉽게 브로드캐스트를 구현할 수 있습니다.

자동 재연결(Auto Reconnect)은 클라이언트와 서버 연결이 끊어졌을 때, 다시 연결을 시도하는 기능입니다.
WebSocket은 기본적으로 연결이 끊어지면 자동으로 재연결되지 않으며, 직접 재연결 로직을 구현해야 합니다.
socket.io는 기본적으로 자동 재연결 기능을 제공하여 네트워크 단절 후에도 연결을 유지할 수 있습니다.
